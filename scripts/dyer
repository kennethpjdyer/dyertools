#!/usr/bin/env python3
##################################################################################
# dyer - main utility for calling dyer processes
#
# Copyright (c) 2019, Kenneth P. J. Dyer <kenneth@avoceteditors.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder nor the name of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##################################################################################

# Module Imports
import argparse
import pathlib
import pkg_resources

# Local Imports
import libdyer.notify

# Configure Logging
import logging
logger = logging.getLogger()

# Report Version Information
def report_version(args):
    """Reports the current version of the utility. """
    name = "Dyer Tools"
    byline = "General purpose utilities for writers and Linux users" 
    version = pkg_resources.get_distribution("dyer").version

    if args.verbose:
        contents = [
            f"{name} - {byline}",
            "Kenneth P. J. Dyer <kenneth@avoceteditors.com>",
            "Avocet Editorial Consulting",
            f"Version: {version}"
        ]
        line = '\n  '.join(contents)
    else:
        line = f"{name} - version {version}"

    print(line)


# Main Process
if __name__ == '__main__':

    # Initialize Parser
    parser = argparse.ArgumentParser(
        prog="dyer",
        #usage="General purpose utility"
    )
    parser.set_defaults(func=report_version)

    ############ OPTIONS ####################### 
    opts = parser.add_argument_group("Options")
    opts.add_argument("-d", "--debug", action="store_true",
        help="Enables debugging messages")
    opts.add_argument("-v", "--verbose", action="store_true",
        help="Enables verbose log messages")

    ############ COMMANDS ######################
    cmds = parser.add_subparsers(
        title = "Commands"
    )

    # Notification Command
    cmd_notify = cmds.add_parser(
        "notify",
        help="Tests notification functions")
    cmd_notify.set_defaults(func=libdyer.notify.run, operation="tasks")

    cmd_notify_ops = cmd_notify.add_subparsers(title="Operations")
    cmd_notify_tasks = cmd_notify_ops.add_parser("tasks")
    cmd_notify_tasks.set_defaults(operation="tasks")





    # Version Command
    cmd_version = cmds.add_parser(
        "version", 
        help="Reports version information")
    cmd_version.set_defaults(func=report_version)


    ############### RUN COMMANDS ###################### 
    args = parser.parse_args()

    # Configure Logging
    log_format = "[ %(levelname)s ]: %(message)s"
    log_level = logging.WARNING

    if args.verbose:
        log_format = "[ %(levelname)s ] (%(filename)s:%(lineno)s): %(message)s"

    if args.debug:
        log_level = logging.DEBUG


    logging.basicConfig(format=log_format, level=log_level)

    # Run Operation
    args.func(args)



